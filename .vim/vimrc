if has('nvim')
    let g:editor_root=expand("~/.config/nvim")
else
    let g:editor_root=expand("~/.vim")
endif

" source ~/.vim/vundle.vim
" switched from Vundle to vim-plug
source ~/.vim/plugins.vim

syntax on

" filetype on
filetype plugin indent on


" set encoding=utf-8
set noswapfile
" in all modes do not select row numbers via mouse
set mouse=a


if has('nvim')
    " copy-to-clipboard support
    " sudo apt-get install xclip
    " python provider for plugins such as jedi, ultisnips etc.
    " pip2 install --upgrade neovim
    " pip3 install --upgrade neovim

    " 2 FIX:
    " so MYVIMRC
    " paths with .vim or symlink (editor_root)
    " sneak highlights
else
    set ttymouse=xterm2
    packadd! matchit
endif


if has('termguicolors')
    set termguicolors
endif


set undofile
set undodir=$HOME/.vim/undo
set undolevels=1000

" to be able switch buffer wo saving explicitly
set hidden

" cursor is kept in the same column on buffer switch
set nostartofline

" One of the following lines will save me from delays on exiting visual mode
" set esckeys
"set timeoutlen=1000
"set ttimeoutlen=0
set notimeout
set ttimeout
set ttimeoutlen=10

" do not select first word char on vw [default - inclusive]
set selection=inclusive

" position of splits
set splitright
set splitbelow

" alias unnamed register to the + register, which is the X Window clipboard
set clipboard=unnamedplus

" === Indentation ====================
set tabstop=4
" tab like 4 spaces
set softtabstop=4
" number of spaces to use for each step of indent
set shiftwidth=4
" drop unused spaces
set shiftround
" tab with spaces
set expandtab
" copy indent from previous line
set autoindent
" nowrap long lines
set textwidth=0
" ===================

" === Search =========================
" Highlight search results
set nohlsearch
" make so it do not hl when vimrc reloads, even if hlsearch was on
noh

" do not auto-move when hit *
" nnoremap * *<c-o>
" Keep search matches in the middle of the window.
" conflicts with Indexed Search plugin
" nnoremap n nzz
" nnoremap N Nzz

" Ignore case in search patterns
set ignorecase
" Override the 'ignorecase' option if the search pattern contains upper case characters
set smartcase
" While typing a search command, show where the pattern
set incsearch
" ====================================

" not less then x rows fixed before/after line with cursor during scroll
set scrolloff=3
" lines to scroll when cursor leaves screen
" set scrolljump=3
set scrolljump=1
set sidescroll=1
set sidescrolloff=10

set showtabline=2

" 00 padded digits considered decimal, not octal. So now C-a for 007 does 008 instead of 010
set nrformats=

" Allow backspace to remove indents, newlines and old tex"
set backspace=indent,eol,start
" Start in normal (non-paste) mode
set nopaste


" === Matching characters
" the cursor will briefly jump to the matching brace when you insert one
" set showmatch
" set matchtime=3
" Make < and > match as well
" set matchpairs+=<:>
set matchpairs=(:),[:],{:}


" === Display ========================
" use 256 colors in terminal. Put before colorscheme settings
" Also, if the terminfo file is correct, there's no need to set 't_Co' in Vim. It will ask the terminal for that value.
set t_Co=256

colorscheme badwolf
" highlight Normal ctermbg=None


" Always show a statusline
set laststatus=2

" Show commands
set showcmd
" do not print INSERT in insert mode. airline can handle that. and it
" conflicts with jedi-call-signatures setts
set noshowmode

" set colorcolumn=79
" number of current line
set number
" reletive numbers for up/down
set relativenumber



"show invisible characters
" set listchars=nbsp:␣,extends:…,trail:•,tab:»·
set list
" set listchars=eol:↲,tab:▶▹,nbsp:␣,extends:…,trail:•
set listchars=nbsp:␣,precedes:…,extends:…,tab:»\ ,trail:·
" set listchars=eol:¬,
" set showbreak=…\ 
" set showbreak=▹\ 
set showbreak=↪\ 
" this setting can enable cursor beyond last row character
set virtualedit=block


" === Custom mappings ======================================================
" ===================================================================

" ==== Leader ====
" ================================================
let mapleader = ","
let maplocalleader = " "
" let mapleader = " "
" nmap <space> ,
"map <space> <leader>
"map <space><space> <leader><leader>
" Edit config files
nnoremap <leader><Tab> :tabe<cr>
nnoremap <leader>er :e $MYVIMRC<CR>
" nnoremap <leader>ev :e ~/.vim/vundle.vim<CR>
nnoremap <leader>ev :e ~/.vim/plugins.vim<CR>
nnoremap <leader>ep :e ~/.vim/plugin_settings.vim<CR>
nnoremap <leader>en :e /media/data/Dropbox/vimnotes<CR>
nnoremap <leader>ew :e /media/data/Dropbox/vimworknotes<CR>
nnoremap <leader>eW :e /media/data/Dropbox/vimworknotes_deep<CR>
nnoremap <leader>eS :e /media/data/Dropbox/vimworknotes_passwords<CR>
nnoremap <leader>et :e ~/.tmux.conf<CR>
nnoremap <leader>ez :e ~/.zshrc<CR>
" Reload vimrc
" nnoremap <leader>rr :source $MYVIMRC<CR>
nnoremap <leader>rr :source ~/.vim/vimrc<CR>

nnoremap <leader>q :qa!<CR>
" closes tab containing buffer
" nnoremap <leader>d :bd!<cr>
" do not close containing tab
nnoremap <leader>d :Bclose!<CR>
" Kill window - conflicts with current Easymotion hotkey
" nnoremap <leader>Q :q<cr>

" filetype related
nnoremap <leader>fh :set ft=html<CR>
nnoremap <leader>fj :set ft=htmljinja<CR>
nnoremap <leader>fd :set ft=htmldjango<CR>
nnoremap <leader>fp :set ft=python<CR>

" tab navigation
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
nnoremap <leader>0 10gt

" ==== Localleader ===============================
" ================================================

" clear normal/visual mode highlighting
nnoremap <localleader><space> :noh<CR>

" Show trailing whitespace:
nnoremap <localleader>h<space> /\s\+$<cr>

nnoremap <localleader>; :<up>
nnoremap <localleader>/ /<up>
" ================================================



" easier inline navigation
noremap H ^
noremap L $
vnoremap L g_

" nnoremap ) 3}
" nnoremap ( 3{
" vnoremap ) 3}
" vnoremap ( 3{
nnoremap ) 7j
nnoremap ( 7k
vnoremap ) 7j
vnoremap ( 7k

nnoremap ' `
vnoremap ' `

" jump to first/last line of a paragraph instead of empty lines
" nnoremap <expr> { len(getline(line('.')-1)) > 0 ? '{+' : '{-'
" nnoremap <expr> } len(getline(line('.')+1)) > 0 ? '}-' : '}+'

" nnoremap j gj
" nnoremap k gk
" nnoremap gj j
" nnoremap gk k
nnoremap <expr> j (v:count > 1 ? "m'" . v:count . 'j' : 'gj')
nnoremap <expr> k (v:count > 1 ? "m'" . v:count . 'k' : 'gk')
" nnoremap <expr> j (v:count > 1 ? "m'" . v:count : '') . 'j'
" nnoremap <expr> k (v:count > 1 ? "m'" . v:count : '') . 'k'
" vnoremap j gj
" vnoremap k gk
vnoremap <expr> j (v:count > 1 ? "m'" . v:count . 'j' : 'gj')
vnoremap <expr> k (v:count > 1 ? "m'" . v:count . 'k' : 'gk')


" highlight last inserted text
nnoremap gs `[v`]
" gV `[v`] - inconvenient
" gl/gh are vacant

" horizontal scroll
nnoremap zh 30zh
nnoremap zl 30zl

" Split lines on space. opposit to J
nnoremap " f<space>r<CR>l

" Save
nmap <F2> :update<CR>
vmap <F2> <Esc><F2>gv
imap <F2> <Esc><F2>
nmap <leader>t :update<CR>
vmap <leader>t <Esc><leader>gv
nnoremap <leader>z :NERDTreeToggle<CR>

" " scroll by n lines at once
" nnoremap <C-e> ^5<C-e>5j
" nnoremap <C-y> ^5<C-y>5k
" vnoremap <C-e> 5<C-e>
" vnoremap <C-y> 5<C-y>
nnoremap <C-e> 5<C-e>
nnoremap <C-y> 5<C-y>

" Easier split navigations
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
xnoremap <C-J> <C-W><C-J>
xnoremap <C-K> <C-W><C-K>
xnoremap <C-L> <C-W><C-L>
xnoremap <C-H> <C-W><C-H>

inoremap <c-a> <Home>
inoremap <c-e> <End>
cnoremap <c-a> <home>
cnoremap <c-e> <end>
inoremap <C-d> <Del>
inoremap <C-b> <Left>
inoremap <C-f> <Right>
inoremap <C-h> <Backspace>
cnoremap <C-d> <Del>
cnoremap <C-b> <Left>
cnoremap <C-f> <Right>
cnoremap <C-h> <Backspace>

" by default those keys scroll history up-down with no respect to prefix
cnoremap <C-n> <Down>
cnoremap <C-p> <Up>

" switch to alternate buffer
nnoremap <c-p> <C-^>

" search for visually selected text
" and now i have vim-asterisk
" vnoremap // y/<C-R>"<CR>

" since i use q for other things
nnoremap ! q

nnoremap <leader>v /<c-r>+<cr>
nnoremap 0 V
vnoremap 0 V


" ========== end of Custom mappings ==================================
" ===================================================================




" ==================== ctags ==================================
" ===================================================================
set tags=project.tags,env.tags

" generate simple tags (more flags for this command are in ~/.ctags conf file)
nnoremap <leader>gtp :!ctags -f 'project.tags' --exclude={env,.env,.env_django145,feeds/mysql}<cr>
" generate env tags
nnoremap <leader>gte :!ctags -f 'env.tags' $VIRTUAL_ENV/lib/python2.7/site-packages<cr>
" ===============================================


" set nowildmenu
set nowildmenu
set wildmode=longest:list,full
set wildignore+=.hg,.git,.svn
set wildignore+=*.jpg,*.jpeg,*.bmp,*.gif,*.png
set wildignore+=*.pyc

" Show as much as possible of a wrapped last line, not just @
set display=lastline


" === Text objects ==============================
for char in [ '_', '/', '<bslash>', '`' ]
    execute 'xnoremap i' . char . ' :<C-u>normal! T' . char . 'vt' . char . '<CR>'
    execute 'onoremap i' . char . ' :normal vi' . char . '<CR>'
    execute 'xnoremap a' . char . ' :<C-u>normal! F' . char . 'vf' . char . '<CR>'
    execute 'onoremap a' . char . ' :normal va' . char . '<CR>'
endfor

"================================================




" === Scripts ======================================
" ==================================================

" === GUI ===============================================

if has("gui_running")
    " GUI is running or is about to start.
    "set guifont=Menlo\ Regular\ for\ Powerline:h12

    " Remove all the UI cruft
    " minus toolbar
    set go-=T
    " minus Menu bar is present
    set go-=m
    " minus Left-hand scrollbar
    set go-=l
    " minus Left-hand scrollbar when there is a vertically split
    set go-=L
    " minus Right-hand scrollbar
    set go-=r
    " minus Right-hand scrollbar when there is a vertically split
    set go-=R

    " highlight SpellBad term=underline gui=undercurl guisp=Orange

    " Different cursors for different modes.
    " set guicursor=n-c:block-Cursor-blinkon0
    " set guicursor+=v:block-vCursor-blinkon0
    " set guicursor+=i-ci:ver20-iCursor
    " Disable all blinking:
    set guicursor+=a:blinkon0

  " Maximize gvim window (for an alternative on Windows, see simalt below).
  set lines=999 columns=999
" else
" FAILS IF TMUX ADDS HIS TABLINE
  " This is console Vim.
  " if exists("+lines")
  "   set lines=55
  " endif
  " if exists("+columns")
  "   set columns=130
  " endif
endif
" ==================================================


" Only show cursorline in the current window and in normal mode.
" ==================================================
" set cursorline
" augroup cline
"     au!
"     au WinLeave,InsertEnter * set nocursorline
"     au WinEnter,InsertLeave * set cursorline
" augroup END
" ==================================================

" hi CursorLine ctermbg=235 cterm=none

" hi CursorLine term=bold cterm=bold guibg=Grey40
" hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white

" ===========================================
" Make sure Vim returns to the same line when you reopen a file.
" ===========================================
augroup line_return
    au!
    au BufReadPost *
        \ if line("'\"") > 0 && line("'\"") <= line("$") |
        \     execute 'normal! g`"zvzz' |
        \ endif
augroup END
" ===========================================

" === View and paste from a register =======
" Display the numbered registers, press a key and paste it to the buffer
" candidate 4del
function! Reg()
    reg
    echo "Register: "
    let char = nr2char(getchar())
    if char != "\<Esc>"
        execute "normal! \"".char."p"
    endif
    redraw
endfunction

command! -nargs=0 Reg call Reg()

" ===========================================


" === List all leader mappings ========================================
function! ListLeaders()
     silent! redir @a
     silent! nmap <LEADER>
     silent! redir END
     silent! new
     silent! put! a
     silent! g/^s*$/d
     silent! %s/^.*,//
     silent! normal ggVG
     silent! sort
     silent! let lines = getline(1,"$")
endfunction
" ===========================================


" === end of Scripts ========================================




" === Filetype-related ========================

" removes underline in html for 'a' tags. and something more
let html_no_rendering=1

" au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm set ft=jinja
autocmd BufRead,BufNewFile *.sql set filetype=pgsql
autocmd FileType htmljinja setlocal commentstring={#\ %s\ #}
autocmd FileType htmldjango setlocal commentstring={#\ %s\ #}

autocmd FileType python,javascript setlocal colorcolumn=80
" do not show docstring window during completion
autocmd FileType python setlocal completeopt-=preview

autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
" some day..
" autocmd FileType xml,html,htmljinja,htmldjango setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
autocmd FileType xml,html,htmljinja,htmldjango setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
autocmd FileType sql setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
" remove annoying <:> pair highligh in html
autocmd FileType xml,html,htmljinja,htmldjango set matchpairs=(:),[:],{:}

autocmd BufRead,BufNewFile *.go setlocal nolist

augroup ft_html
    au!
    " Django tags
    au FileType html,jinja,htmldjango,htmljinja inoremap <buffer> <c-t> {%<space><space>%}<left><left><left>
    " Django variables
    au FileType html,jinja,htmldjango,htmljinja inoremap <buffer> <c-y> {{<space><space>}}<left><left><left>
augroup END

" do not extend comment-string to the next lines
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" === end of filetype-related ===============================================================

" === Highlight ================================================

" do not highlight & and ? in addresses in red
highlight Error NONE
highlight lCursor guifg=NONE guibg=Cyan
highlight MatchTag cterm=bold,underline ctermfg=11 ctermbg=none
highlight MatchParen cterm=bold ctermfg=164 ctermbg=none guifg=magenta

" blue fg as in clever-f find
" highlight Search ctermfg=39 ctermbg=NONE cterm=bold,underline
" bright magenta fg
" highlight Search ctermfg=164 ctermbg=NONE cterm=bold
" magenta fg, but with light transparent bg
highlight Search ctermfg=164 ctermbg=235 cterm=bold guifg=#d700d7 guibg=#262626
" pale yellow bg
" highlight Search ctermfg=16 ctermbg=143 cterm=bold

" hi StatusLine ctermfg=164 ctermbg=39 cterm=bold
" hi StatusLineNC ctermfg=16 ctermbg=235 cterm=bold

highlight TabLine term=underline ctermfg=243 ctermbg=236 guifg=#767676 guibg=#303030
highlight TabLineSel term=bold ctermfg=222 ctermbg=238 guifg=#ffd787 guibg=#444444
highlight TabLineFill term=reverse ctermfg=15 ctermbg=236 guibg=#303030
" ==================================================================



" ========== Plugin settings =========
source ~/.vim/plugin_settings.vim


